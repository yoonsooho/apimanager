// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  username   String       
  email      String       @unique
  password   String
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  // 다대다 관계를 위한 연결 모델
  userProjects UserProject[] // User와 Project 간의 관계
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String   // 프로젝트 이름
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 프로젝트에 속하는 RowData
  rowData     RowData[] // 여러 RowData를 가질 수 있는 관계
  // 프로젝트에 속하는 User와의 관계
  userProjects UserProject[] // 유저와 프로젝트 간의 관계 설정
}

model RowData {
  id          Int      @id @default(autoincrement())
  status      String   
  method      String   
  endPoint    String   
  queryString String   
  request     Json
  response    Json
  memo        String   @db.Text 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 프로젝트와의 관계
  projectId   Int
  project     Project   @relation(fields: [projectId], references: [id]) // Project와의 관계 설정
}

// 사용자와 프로젝트 간의 중간 테이블 모델
model UserProject {
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  // 권한 필드 추가 (예: VIEWER, EDITOR)
  role      String   // 권한을 저장하는 필드

  @@id([userId, projectId]) // 복합 키로 설정하여 동일한 조합이 중복되지 않도록 설정
}